openapi: '3.0.2'
info:
  title: Survey API
  license:
    name: MIT
    url: https://opensource.org/license/mit/
  description: 'Simple API to manage a simple survey'
  version: '1.0.0'
servers:
  - url: https://{subdomain}.sheepcs.de/api/v1
    description: 'Public URL'
    variables:
      subdomain:
        default: survey
  - url: https://localhost:{port}/api/v1
    description: 'Local testing URL'
    variables:
      port:
        default: '3000'

paths:
  /security/register-user:
    post:
      tags: 
        - security
      description: 'Register a new user account on the server'
      requestBody:
        content:
          application/json:
              schema:
                type: object
                description: 'User account credentials'
                properties:
                  firstName:
                    type: string
                    minLength: 1
                    maxLength: 50
                  lastName:
                    type: string
                    minLength: 1
                    maxLength: 50
                  email:
                    type: string
                    format: email
                  password:
                    type: string
                    minLength: 8
                    maxLength: 50
                example: {
                  "firstName": "Jane",
                  "lastName": "Doe",
                  "email": "jane.doe@example.com",
                  "password": "12345678"
                }
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/UserId'
        '409':
          description: 'Conflict'
          content:
            application/json:
              schema:
                type: object
                description: 'Fails if user is already registered'
                properties:
                  message:
                    type: string
                example:
                  message: 'Account might already exists'
        '500':
          $ref: '#/components/responses/500'

  /security/login-user:
    post:
      tags: 
        - security
      description: 'Login a user account on the server'
      requestBody:
        content:
          application/json:
              schema:
                type: object
                description: 'User account credentials'
                properties:
                  email:
                    type: string
                    format: email
                  password:
                    type: string
                    minLength: 8
                    maxLength: 50
                example: {
                    "email": "jane.doe@example.com",
                    "password": "12345678"
                }
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema: 
                type: object
                description: 'Access token for the user'
                properties:
                  token:
                    type: string
                    format: jwt
                example: {
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiQ3JlYXRvciIsImlhdCI6MTcxMzUzOTQ4OSwiZXhwIjoxNzEzNTQxMjg5LCJpc3MiOiJsb2NhbGhvc3QiLCJzdWIiOiIxMTAyMTU2ZS1iMWYxLTRlY2YtOTEwYS1mZDAxMmI3ZDhlNDEiLCJqdGkiOiI2NjJjODBmNy1mZDVlLTRkNTItODExNC05ZmZiNDAyYjQ1ZDUifQ.-Dj5uC5mOn2oIC6M3lpCTdMWJbGW1EuDfee4F6BB9C0"
                }
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /survey-list/open-surveys:
    get:
      tags:
        - survey-list
      description: 'Returns a list of open surveys of that user'
      security:
        - BearerToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                items:
                  allOf:
                    - $ref: '#/components/schemas/SurveyWithId'
                    - $ref: '#/components/schemas/OptionsWithId'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /survey-list/completed-surveys:
    get:
      tags:
        - survey-list
      description: 'Returns a list of completed surveys of that user'
      security:
        - BearerToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                items:
                  allOf:
                    - $ref: '#/components/schemas/SurveyWithId'
                    - $ref: '#/components/schemas/OptionsWithId'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /survey-list/create-survey:
    post:
      tags:
        - survey-list
      description: 'Creates a new survey'
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Survey'
                  - $ref: '#/components/schemas/Options'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyIds'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  /survey-list/adjust-survey:
    post:
      tags:
        - survey-list
      description: 'Adjusts parameters of a survey'
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SurveyWithId'
                  - $ref: '#/components/schemas/OptionsAdjust'

      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  /survey-list/complete-survey:
    post:
      tags:
        - survey-list
      description: 'Completes (ends) a survey'
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
              schema:
                type: object
                description: 'Id of the survey'
                properties:
                  surveyId:
                    type: string
                    format: uuid
                example: {
                    "surveyId": "e1b3f489-ae9b-4bcc-8a17-a5bf9e841fb4",
                }
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'



components:
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserId:
      type: object
      description: 'Returns the user id'
      properties:
        status:
          type: string
          format: uuid
      example:
        id: 'f197ea8b-da1b-4197-8cbd-600733ce6c45'

    Options:
      type: object
      description: 'Different options of the survey'
      required:
        - options
      properties:
        options:
          type: array
          minItems: 2
          items:
            type: object
            required:
              - optionName
              - content
            properties:
              optionName:
                description: 'Question of the option'
                type: string
              content: 
                description: 'Additional context of the survey'
                type: string
      example:
        options: [
          {
            optionName: 'Choice Name 1',
            content: 'Context of the choice'
          },
          {
            optionName: 'Choice Name 2',
            content: 'Context of the choice'
          }
        ]

    Survey:
      type: object
      required:
        - surveyName
        - surveyDescription
        - choicesType
        - endDate
      properties:
        surveyName:
          description: 'Name of the survey'
          type: string
        surveyDescription:
          description: 'Description of the survey'
          type: string
        choicesType:
          description: 'Survey is single or multiple choice?'
          type: string
          enum:
            - 'single'
            - 'multiple'
        endDate:
          description: 'When will the survey end?'
          type: string
          format: ISO-DateString
      example:
        surveyName: 'The Survey'
        surveyDescription: 'What do you think about?'
        choicesType: 'single'
        endDate: '2024-02-19T18:09:00.967Z'

    SurveyWithId:
      type: object
      required:
        - surveyId
        - surveyName
        - surveyDescription
        - choicesType
        - endDate
      properties:
        surveyId:
            description: 'Name of the survey'
            type: string
            format: uuid
        surveyName:
          description: 'Name of the survey'
          type: string
        surveyDescription:
          description: 'Description of the survey'
          type: string
        choicesType:
          description: 'Survey is single or multiple choice?'
          type: string
          enum:
            - 'single'
            - 'multiple'
        created:
          description: 'When has this survey been created'
          type: string
          format: ISO-DateString
        endDate:
          description: 'When will the survey end?'
          type: string
          format: ISO-DateString
      example: {
            "surveyId": "53f79b77-2db2-4a55-bcca-05d82dfbeb1a",
            "surveyName": "The postman survey Updated",
            "surveyDescription": "Some test Haha",
            "choicesType": "single",
            "created": "2024-04-16T18:25:40.000Z",
            "endDate": "2024-05-03T23:00:00.000Z",
        }

    SurveyIds:
      type: object
      description: 'The Ids of the survey for later editing'
      required:
        - options
      properties:
        surveyId:
          type: string
          format: uuid
        options:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              optionId:
                type: string
                format: uuid
      example: {
            "surveyId": "0e84a131-6f74-45d7-b382-483a667e73e6",
            "options": [
                {
                    "optionId": "fced3fe3-bcea-4b2d-9e8b-9920ae963f5c"
                },
                {
                    "optionId": "1e101da6-cd0d-4748-a52c-efeaa3679d2b"
                }
            ]
        }

    OptionsWithId:
      type: object
      description: 'Different options of the survey'
      required:
        - options
      properties:
        options:
          type: array
          minItems: 2
          items:
            type: object
            required:
              - optionName
              - optionId
              - content
            properties:
              optionId:
                type: string
                format: uuid
                description: 'Id of that option'
              optionName:
                description: 'Question of the option'
                type: string
              content: 
                description: 'Additional context of the survey'
                type: string
      example:
        options: [
          {
            optionName: 'Choice Name 1',
            optionId: '28dc30d0-de6c-4566-83b6-b51b2bc1e59f',
            content: 'Context of the choice'
          },
          {
            optionName: 'Choice Name 2',
            optionId: '211c623d-b18b-4df8-a531-4c7a68e9fcb2',
            content: 'Context of the choice'
          }
        ]

    OptionsAdjust:
      type: object
      description: 'Removes Options from the survey'
      required:
        - options
      properties:
        options:
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: '#/components/schemas/OptionsNew'
              - $ref: '#/components/schemas/OptionsUpdate'
              - $ref: '#/components/schemas/OptionsDelete'
      example:
        options: [
          {
            optionId: '28dc30d0-de6c-4566-83b6-b51b2bc1e59f',
            status: 'Delete'
          },
          {
            optionId: '28dc30d0-de6c-4566-83b6-b51b2bc1e59f',
            optionName: 'Choice Name 2',
            content: 'Context of the choice',
            status: 'New'
          },
          {
            optionId: '28dc30d0-de6c-4566-83b6-b51b2bc1e59f',
            optionName: 'Choice Name 2',
            content: 'Context of the choice',
            status: 'Update'
          },
        ]

    OptionsDelete:
      type: object
      required:
        - optionId
        - status
      properties:
        optionId:
          type: string
          format: uuid
        status: 
          description: 'Delete'
          type: string
      example:
        options: {
            optionId: '28dc30d0-de6c-4566-83b6-b51b2bc1e59f',
            status: 'Delete'
          }

    OptionsNew:
      type: object
      required:
        - optionId
        - optionName
        - content
        - status
      properties:
        optionId:
          type: string
          format: uuid
        optionName:
          description: 'Question of the option'
          type: string
        content: 
          description: 'Additional context of the survey'
          type: string
        status: 
          description: 'New'
          type: string
      example:
        options: [
          {
            optionId: '28dc30d0-de6c-4566-83b6-b51b2bc1e59f',
            optionName: 'Choice Name 2',
            content: 'Context of the choice',
            status: 'New'
          }
        ]

    OptionsUpdate:
      type: object
      required:
        - optionId
        - status
      properties:
        optionId:
          type: string
          format: uuid
        optionName:
          description: 'Question of the option'
          type: string
        content: 
          description: 'Additional context of the survey'
          type: string
        status: 
          description: 'Update'
          type: string
      example:
        options: [
          {
            optionId: '28dc30d0-de6c-4566-83b6-b51b2bc1e59f',
            optionName: 'Choice Name 2',
            content: 'Context of the choice',
            status: 'Update'
          }
        ]

  responses:
    '400':
      description: 'The request is invalid'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Reason'
    '401':
      description: 'The request requires a specific token n to authorize'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Reason'
    '403':
      description: 'The request requires a specific credentials to authentificate'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Reason'
    '404':
      description: 'The ressource was not found'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Reason'
    '409':
      description: 'There is a conflict with the provided data'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Reason'
    '500':
      description: 'A internal Server Error has happend'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Reason'

