openapi: '3.0.2'
info:
  title: Survey API
  version: '1.0'
servers:
  - url: https://{subdomain}.sheepcs.de/api/v1
    variables:
      subdomain:
        default: survey

paths:
  /start-session:
    get:
      tags:
        - public
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/CSRFToken'
        '500':
          $ref: '#/components/responses/500'

  /open-share:
    get:
      tags:
        - public
      description: 'Returns a survey for answering'
      parameters:
        - $ref: '#/components/parameters/PublicToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Survey'
                  - $ref: '#/components/schemas/Options'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /survey/get:
    get:
      tags:
        - survey
      description: 'Returns the data from a existing survey'
      parameters:
        - $ref: '#/components/parameters/CreationToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Survey'
                  - $ref: '#/components/schemas/Options'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /survey/share-link:
    get:
      tags:
        - survey
      description: 'Returns the data from a existing survey'
      parameters:
        - $ref: '#/components/parameters/CreationToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    description: 'Link for answering the survey'
                    properties:
                      shareLink:
                        type: string
                        format: url
                    example:
                      shareLink: https://survey.sheepcs.de/?shareLink=bafcee79828347-liencc9djpaw
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /survey/submit:
    post:
      tags:
        - survey
      description: 'Submits a new survey'
      parameters:
        - $ref: '#/components/parameters/CSRFToken'
      requestBody:
        content:
          application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Survey'
                  - $ref: '#/components/schemas/Options'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Created'
                  - $ref: '#/components/schemas/CreationToken'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /survey/update:
    post:
      tags:
        - survey
      description: 'Submits a new survey'
      parameters:
        - $ref: '#/components/parameters/CSRFToken'
      requestBody:
        content:
          application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Survey'
                  - $ref: '#/components/schemas/Options'
                  - $ref: '#/components/schemas/CreationToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /survey/remove:
    post:
      tags:
        - survey
      description: 'Submits a new survey'
      parameters:
        - $ref: '#/components/parameters/CSRFToken'
      requestBody:
        content:
          application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CreationToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /answer/submit:
    post:
      tags:
        - answer
      description: 'Submits a answer to a survey'
      parameters:
        - $ref: '#/components/parameters/CSRFToken'
      requestBody:
        content:
          application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PublicToken'
                  - $ref: '#/components/schemas/Answer'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Created'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /results/get:
    get:
      tags:
        - result
      description: 'Returns the data from a existing survey'
      parameters:
        - $ref: '#/components/parameters/CreationToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Results'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'


components:
  parameters:
    CSRFToken:
      name: x-csrf-token
      in: header
      description: 'CSRF Token'
      schema:
        type: string
        format: base54
        example: 'djalsdjalsjdadjsasjkljd3-diojd'
    PublicToken:
      name: publicToken
      in: query
      description: 'Token to open a survey'
      required: true
      schema:
        type: string
        format: base64url
      example: 'djalsdjalsjdadjsasjkljd3-diojd'
    CreationToken:
      name: creationToken
      in: query
      description: 'Token to edit a survey'
      required: true
      schema:
        type: string
        format: base64url
      example: 'djalsdjalsjdadjsasjkljd3-diojd'

  schemas:
    Success:
      type: object
      properties:
        status:
          type: string
        statusCode:
          type: number
      example:
        status: 'OK'
        statusCode: 200
    Created:
      type: object
      properties:
        status:
          type: string
        statusCode:
          type: number
      example:
        status: 'Created'
        statusCode: 201

    CSRFToken:
      type: object
      properties:
        CSRFToken: # the unique user id
          type: string
          format: base64
      example:
        CSRFToken: 'djalsdjalsjdadjsasjkljd3-diojd'

    Survey:
      type: object
      properties:
        surveyName:
          description: 'Name of the survey'
          type: string
        surveyDescription:
          description: 'Description of the survey'
          type: string
        choicesType:
          description: 'Survey is single or multiple choice?'
          type: string
          enum:
            - 'single'
            - 'multiple'
        creatorName:
          description: 'Who has created the survey'
          type: string
        endDate:
          description: 'When will the survey end?'
          type: string
          format: ISO-DateString
      example:
        surveyName: 'The Survey'
        surveyDescription: 'What do you think about?'
        choicesType: 'single'
        creatorName: 'John Doe'
        endDate: '2024-02-19T18:09:00.967Z'
        

    Options:
      description: 'Different options of the survey'
      type: array
      minItems: 2
      items:
        type: object
        required:
          - optionName
          - content
        properties:
          optionId:
            type: string
            format: uuid
            description: 'Not required on submit (As it is unkown)'
          optionName:
            description: 'Question of the option'
            type: string
          content: 
            description: 'Additional context of the survey'
            type: string
      example:
        options: [
          {
            optionName: 'Choice 1',
            content: 'Context of the choice'
          },
          {
            optionName: 'Choice 2',
            content: 'Context of the choice'
          }
        ]

    Results:
      type: array
      minItems: 0
      items:
        properties:
          sessionId:
            type: string
            format: uuid
            description: 'Id of the the answer session'
          optionSelection:
            type: array
            minItems: 1
            items:
              type: string
              format: uuid
              description: 'UUID of the specific option'
      example: 
        result: [
          {
            sessionId: "aaaaa-bbbbb-bbbbb-ccccc",
            optionSelection: [
              "aaaaa-bbbbb-bbbbb-ccccc",
            ]
          }
        ]

    Answer:
      type: object
      properties:
        optionSelection:
          type: array
          minItems: 1
          items:
            type: string
            format: uuid
            description: 'UUID of the specific option'
      example: 
          optionSelection: [
            "aaaaa-bbbbb-bbbbb-ccccc",
          ]

    CreationToken:
      type: object
      properties:
        creationToken: # the unique user id
          type: string
          format: base64url
          description: 'Needed to manage survey'
      example:
        creationToken: 'djalsdjalsjdadjsasjkljd3-diojd'
    PublicToken:
      type: object
      properties:
        publicToken: # the unique user id
          type: string
          format: base64url
          description: 'Needed for public interaction with survey'
      example:
        publicToken: 'djalsdjalsjdadjsasjkljd3-diojd'
          
  responses:
    '400':
      description: 'Invalid request'
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
              statusCode:
                type: number
            example:
              status: 'Invalid Request'
              statusCode: 400
    '403':
      description: 'Forbidden'
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
              statusCode:
                type: number
            example:
              status: 'Forbidden'
              statusCode: 403
    '404':
      description: 'Not Found'
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
              statusCode:
                type: number
            example:
              status: 'Not Found'
              statusCode: 404
    '500':
      description: 'Server Error'
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
              statusCode:
                type: number
            example:
              status: 'Server Error'
              statusCode: 500
